generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(cuid())
  email           String           @unique
  password        String
  createdAt       DateTime         @default(now()) @map("created_at")
  preferences     Json?
  recommendations Recommendation[]
  sessions        UserSession[]

  @@map("users")
}

model Location {
  id        String   @id @default(cuid())
  name      String
  latitude  Float
  longitude Float
  category  String
  createdAt DateTime @default(now()) @map("created_at")

  // Enhanced multi-provider support
  source String @default("manual") @db.VarChar(50) // 'osm', 'google', 'merged'

  // Source-specific IDs for tracking and refresh
  osmId         String? @map("osm_id") @db.VarChar(255)
  googlePlaceId String? @map("google_place_id") @db.VarChar(255)

  // Data freshness tracking
  osmLastUpdated    DateTime? @map("osm_last_updated")
  googleLastUpdated DateTime? @map("google_last_updated")
  lastUpdated       DateTime? @default(now()) @map("last_updated")

  // Google Places specific fields (commonly queried)
  rating      Decimal? @db.Decimal(2, 1) // 0.0 to 5.0
  reviewCount Int?     @map("review_count")
  priceLevel  Int?     @map("price_level") // 0-4 (Google's scale)

  // Basic place information
  verified    Boolean? @default(false)
  address     String?
  description String?

  // Flexible metadata for provider-specific data
  metadata Json?

  // Data quality and merging
  qualityScore Decimal? @map("quality_score") @db.Decimal(3, 2) // 0.00 to 1.00
  mergeStatus  String?  @map("merge_status") @db.VarChar(50) // 'pending', 'merged', 'conflict'

  recommendations Recommendation[]

  // Enhanced indexing for multi-provider queries
  @@index([source])
  @@index([osmId])
  @@index([googlePlaceId])
  @@index([category])
  @@index([rating])
  @@index([lastUpdated])
  @@index([qualityScore])
  @@index([latitude, longitude], map: "locations_coordinates_idx")
  @@index([latitude, longitude, source], map: "locations_geo_source_idx")
  @@index([category, rating], map: "locations_category_rating_idx")
  @@map("locations")
}

model Recommendation {
  id         String   @id @default(cuid())
  userId     String   @map("user_id")
  locationId String   @map("location_id")
  createdAt  DateTime @default(now()) @map("created_at")
  aiContext  Json?    @map("ai_context")
  location   Location @relation(fields: [locationId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("recommendations")
}

model UserSession {
  id           String   @id @default(cuid())
  userId       String   @map("user_id")
  refreshToken String   @unique @map("refresh_token")
  expiresAt    DateTime @map("expires_at")
  createdAt    DateTime @default(now()) @map("created_at")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_sessions")
}
